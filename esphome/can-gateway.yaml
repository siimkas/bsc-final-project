esphome:
  name: can-gateway
  friendly_name: CAN-Gateway

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source: github://mrk-its/esphome-canopen@siim_k

# Enable logging
logger:
  # level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: "Onrz10Z5UO4vFOhPK+uudqLhFb8lunNv7+sBf6f9u90="

ota:
  password: "998be0f3a36cb89dffefa2d310a3db35"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Can-Gateway Fallback Hotspot"
    password: "pLOBs6yOjMFM"

mqtt:
  broker: homeassistant.local
  username: mqtt
  password: mqtt
  id: mosquitto

canbus:
  - platform: esp32_can
    id: can_bus
    rx_pin: GPIO18
    tx_pin: GPIO19
    can_id: 0
    bit_rate: 500kbps

canopen:
  id: can_gate
  canbus_id: can_bus
  mqtt_id: mosquitto
  node_id: 0
  heartbeat_clients:
    - node_id: 1
      timeout: 1s
    - node_id: 2
      timeout: 1s
    - node_id: 3
      timeout: 1s
  entities:
    - id: temp_sensor
      index: 1
      rpdo: 
        - node_id: 3
          tpdo: 0
          offset: 1
    - id: motion_light_switch
      index: 2
      rpdo:
      - node_id: 2
        tpdo: 0
        offset: 2
    - id: activity_light_switch
      index: 3
      rpdo:
      - node_id: 1
        tpdo: 0
        offset: 2

sensor:

  - platform: template
    name: "Bus Error Count"
    id: can_status_bus_err
    lambda: return id(can_gate).status.bus_err;
    accuracy_decimals: 0

  - platform: template
    name: "Missed Node 1 Heartbeats"
    id: can_status_missed_heartbeats_1
    lambda: return id(can_gate).get_heartbeat_events(1);
    accuracy_decimals: 0
    update_interval: 10s

  - platform: template
    name: "Missed Node 2 Heartbeats"
    id: can_status_missed_heartbeats_2
    lambda: return id(can_gate).get_heartbeat_events(2);
    accuracy_decimals: 0
    update_interval: 10s

  - platform: template
    name: "Missed Node 3 Heartbeats"
    id: can_status_missed_heartbeats_3
    lambda: return id(can_gate).get_heartbeat_events(3);
    accuracy_decimals: 0
    update_interval: 10s

  - platform: template
    name: temp_sensor
    internal: True
    id: temp_sensor
    on_value_range:
      - below: 26.0
        then:
          - light.control:
              id: rgb_light
              state: on
              red: 0%
              green: 0%
              blue: 100%
      - above: 26.0
        below: 27.0
        then:
          - light.control:
              id: rgb_light
              state: on
              red: 0%
              green: 100%
              blue: 0%
      - above: 27.00
        then:
          - light.control:
              id: rgb_light
              state: on
              red: 100%
              green: 0%
              blue: 0%

    
text_sensor:
  - platform: template
    name: "CANOpen Status"
    id: canopen_status
    lambda: |
      static std::string states[] = {"STOPPED", "RUNNING", "BUS_OFF", "RECOVERING"};
      return states[id(can_gate).status.state];
    update_interval: 5s

    on_value:
      - if:
          condition:
            for:
              time: 60s
              condition:
                text_sensor.state:
                  id: canopen_status
                  state: BUS_OFF
          then:
            - logger.log:
                level: WARN
                format: "Bus off for 60s, resetting"
            - lambda: id(can_gate).initiate_recovery();
      - if:
          condition:
            for:
              time: 30s
              condition:
                text_sensor.state:
                  id: canopen_status
                  state: STOPPED
          then:
            - logger.log:
                level: WARN
                format: "starting"
            - lambda: id(can_gate).start();  

light:

  - platform: status_led
    name: "Activity light"
    id: activity_light
    pin: GPIO15
    internal: true

  - platform: status_led
    name: "Motion light"
    id: motion_light
    pin: GPIO2
    internal: true

  - platform: rgb
    name: "Temperature light"
    id: rgb_light
    red: red_light
    green: green_light
    blue: blue_light

output: 
  - platform: ledc
    id: red_light
    pin: GPIO14
    frequency: 1000Hz

  - platform: ledc
    id: green_light
    pin: GPIO12
    frequency: 1000Hz

  - platform: ledc
    id: blue_light
    pin: GPIO13
    frequency: 1000Hz

switch:
  - platform: template
    name: activity_light_switch
    id: activity_light_switch
    turn_on_action:
      - light.turn_on: activity_light
    turn_off_action:
      - light.turn_off: activity_light
    internal: true

  - platform: template
    name: motion_light_switch
    id: motion_light_switch
    turn_on_action:
      - light.turn_on: motion_light
    turn_off_action:
    - light.turn_off: motion_light
    internal: true

